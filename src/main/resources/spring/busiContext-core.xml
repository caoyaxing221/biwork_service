<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/task  
		http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	
	<context:component-scan base-package="com.biwork" />

	<mvc:annotation-driven/>
	<!--  开启这个配置，spring才能识别@Scheduled注解   -->  
    <task:annotation-driven scheduler="myScheduler" mode="proxy"/> 
    <task:scheduler id="myScheduler" pool-size="10"/> 
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />  
	<context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true"  />   
	

	<!-- 数据源c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" >
		<property name="driverClass" value="${db.driver}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<property name="connectionTesterClassName" value="com.mchange.v2.c3p0.impl.DefaultConnectionTester" />
		<property name="preferredTestQuery" value="values(current timestamp)" />
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}" />
	</bean>
    
	<!-- 定义事务管理器(声明式的事务) -->
	<!--<bean id="xcsTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource"></property>
	</bean> -->
	
	<!-- 定义事务拦截器 --> 
	<!--<tx:advice id="xcsTxAdvice" transaction-manager="xcsTxManager">
		<tx:attributes>
			<tx:method name="delete*" rollback-for="Exception"/>
			<tx:method name="insert*"  rollback-for="Exception"/>
			<tx:method name="del*" rollback-for="Exception"/>
			<tx:method name="save*"  rollback-for="Exception"/>
			<tx:method name="update*"  rollback-for="Exception"/>
			<tx:method name="invoke*"  rollback-for="Exception"/>
			<tx:method name="create*"  rollback-for="Exception"/>
			<tx:method name="*"  read-only="true"  rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice> -->
	<!-- 定义事务管理的范围-->
	<!--  <aop:config>
		<aop:pointcut expression="execution(* com.biwork.service..*.*(..))" id="MrOperation"/>
		<aop:advisor advice-ref="xcsTxAdvice" pointcut-ref="MrOperation" />
	</aop:config>-->
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/configuration.xml" />
		<property name="mapperLocations" value="classpath:mybatis/mapper/*.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="corePackage" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.biwork.mapper"></property>
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->
	</bean> 
	

        
        <!--避免IE执行AJAX时，返回JSON出现下载文件 -->  
        <bean id="mappingJacksonHttpMessageConverter"  
            class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
            <property name="supportedMediaTypes">  
                <list>  
                    <value>text/html;charset=UTF-8</value>  
                </list>  
            </property>
            <property name="objectMapper">
               <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                   <property name="serializationInclusion">
                      <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
                   </property>
               </bean>
		    </property> 
        </bean>  
        <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->  
        <bean  class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
            <property name="messageConverters">  
                <list>  
                    <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->  
                </list>  
            </property>  
        </bean>  
    <bean  class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" /> 
    <!--spring 工具类-->
    <bean id="springContextUtil" class="com.biwork.util.SpringContextUtil"/>
  <!-- 使用默认的Servlet来响应静态文件 -->
	  <mvc:default-servlet-handler />  
	  <bean class="com.biwork.util.Swagger2Config" /> 
        <mvc:interceptors>
                <mvc:interceptor>
                        <mvc:mapping path="/**" />
                        <mvc:exclude-mapping path="/static/**" />
                        <mvc:exclude-mapping path="/index.html" />
                        <mvc:exclude-mapping path="/swagger-ui.html" />
                        <mvc:exclude-mapping path="/webjars/**" />
                        <mvc:exclude-mapping path="/swagger-resources/**"/>
                        <mvc:exclude-mapping path="/v2/api-docs"/>
                        <mvc:exclude-mapping path="/img/**" />
                        <mvc:exclude-mapping path="/resource/**" />
                        <bean class="com.biwork.common.LoginInterceptor"></bean>
                </mvc:interceptor> 
        </mvc:interceptors> 
	
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
            <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
            <property name="prefix" value="" />  
            <property name="suffix" value="" />  
      </bean>  
    
   
   
    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	     <bean id="multipartResolver"
	         class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	         <property name="defaultEncoding" value="UTF-8" />
	         <!-- 指定所上传文件的总大小,单位字节。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
	         <property name="maxUploadSize" value="10240000" />
	     </bean>
   </beans>