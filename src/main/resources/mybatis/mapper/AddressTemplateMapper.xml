<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.biwork.mapper.AddressTemplateMapper">
  <resultMap id="BaseResultMap" type="com.biwork.entity.AddressTemplate">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="team_id" jdbcType="INTEGER" property="teamId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="inserttime" jdbcType="TIMESTAMP" property="inserttime" />
    <result column="updatetime" jdbcType="TIMESTAMP" property="updatetime" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="create_userid" jdbcType="INTEGER" property="createUserid" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.biwork.entity.AddressTemplate">
    <result column="address_msg" jdbcType="LONGVARCHAR" property="addressMsg" />
  </resultMap>
     <sql id="page_val">
   <if test="fetch!=null">limit #{fetch,jdbcType=INTEGER} </if>
		<if test="offset!=null">offset #{offset,jdbcType=INTEGER} </if>
		
    </sql>
  <sql id="Base_Column_List">
    id, team_id, name, inserttime, updatetime, state, create_userid
  </sql>
  <sql id="Blob_Column_List">
    address_msg
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from address_template
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByTeamId"  resultType="com.biwork.vo.AddressTemplateListVo">
    select  (@rowNum:=@rowNum+1) rm ,t.* ,(select count(1) from address_template where create_userid=#{userId,jdbcType=INTEGER}
    AND state=0 
    and team_id=#{teamId,jdbcType=INTEGER}
         ) count
	from (
	select a.id,a.name,state
	from address_template a 
	where  a.create_userid=#{userId,jdbcType=INTEGER} and a.team_id=#{teamId,jdbcType=INTEGER} 
	 
	 order by a.inserttime desc ) t,(SELECT @rowNum:=0) b 
  	<include refid="page_val" />
  </select>
  <select id="selectByTemplateId"  resultType="com.biwork.vo.AddressTemplateVo">
  	select a.id,a.name,address_msg as addressMsg,state
	from address_template a 
	where   <if test="userId != null"> a.create_userid=#{userId,jdbcType=INTEGER} and  </if> id=#{templateId,jdbcType=INTEGER} 
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from address_template
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.biwork.entity.AddressTemplate">
    insert into address_template (id, team_id, name, 
      inserttime, updatetime, state, 
      create_userid, address_msg)
    values (#{id,jdbcType=INTEGER}, #{teamId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{inserttime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP}, #{state,jdbcType=INTEGER}, 
      #{createUserid,jdbcType=INTEGER}, #{addressMsg,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.biwork.entity.AddressTemplate"  useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into address_template
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="teamId != null">
        team_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="inserttime != null">
        inserttime,
      </if>
      <if test="updatetime != null">
        updatetime,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createUserid != null">
        create_userid,
      </if>
      <if test="addressMsg != null">
        address_msg,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="teamId != null">
        #{teamId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="inserttime != null">
        #{inserttime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="createUserid != null">
        #{createUserid,jdbcType=INTEGER},
      </if>
      <if test="addressMsg != null">
        #{addressMsg,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.biwork.entity.AddressTemplate">
    update address_template
    <set>
      <if test="teamId != null">
        team_id = #{teamId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="inserttime != null">
        inserttime = #{inserttime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="createUserid != null">
        create_userid = #{createUserid,jdbcType=INTEGER},
      </if>
      <if test="addressMsg != null">
        address_msg = #{addressMsg,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.biwork.entity.AddressTemplate">
    update address_template
    set team_id = #{teamId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      inserttime = #{inserttime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER},
      create_userid = #{createUserid,jdbcType=INTEGER},
      address_msg = #{addressMsg,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.biwork.entity.AddressTemplate">
    update address_template
    set team_id = #{teamId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      inserttime = #{inserttime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER},
      create_userid = #{createUserid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>